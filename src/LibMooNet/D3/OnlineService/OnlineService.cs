// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.OnlineService {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class OnlineService {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_EntityId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.EntityId, global::D3.OnlineService.EntityId.Builder> internal__static_D3_OnlineService_EntityId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_GameId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameId, global::D3.OnlineService.GameId.Builder> internal__static_D3_OnlineService_GameId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ItemId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ItemId, global::D3.OnlineService.ItemId.Builder> internal__static_D3_OnlineService_ItemId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_CoopCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.CoopCreateParams, global::D3.OnlineService.CoopCreateParams.Builder> internal__static_D3_OnlineService_CoopCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_PvPCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.PvPCreateParams, global::D3.OnlineService.PvPCreateParams.Builder> internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_GameCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameCreateParams, global::D3.OnlineService.GameCreateParams.Builder> internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_HeroCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroCreateParams, global::D3.OnlineService.HeroCreateParams.Builder> internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static OnlineService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNPbmxpbmVTZXJ2aWNlLnByb3RvEhBEMy5PbmxpbmVTZXJ2aWNlIjEKCEVu" + 
          "dGl0eUlkEhIKB2lkX2hpZ2gYASACKAQ6ATASEQoGaWRfbG93GAIgAigEOgEw" + 
          "IkMKBkdhbWVJZBISCgdmYWN0b3J5GAEgAigEOgEwEhIKB2lkX2hpZ2gYAiAC" + 
          "KAQ6ATASEQoGaWRfbG93GAMgAigEOgEwIi8KBkl0ZW1JZBISCgdpZF9oaWdo" + 
          "GAEgAigEOgEwEhEKBmlkX2xvdxgCIAIoBDoBMCLxAQoQQ29vcENyZWF0ZVBh" + 
          "cmFtcxIcChBkaWZmaWN1bHR5X2xldmVsGAEgAigFOgItMRIOCgNhY3QYAiAC" + 
          "KBE6ATASFQoJc25vX3F1ZXN0GAMgAigPOgItMRIZCg1xdWVzdF9zdGVwX2lk" + 
          "GAQgAigFOgItMRI8ChhyZXN1bWVfZnJvbV9zYXZlX2hlcm9faWQYBSABKAsy" + 
          "Gi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkEh4KD29wZW5fdG9fZnJpZW5k" + 
          "cxgGIAIoCDoFZmFsc2USHwoXb3Blbl90b19mcmllbmRzX21lc3NhZ2UYByAB" + 
          "KAkiKAoPUHZQQ3JlYXRlUGFyYW1zEhUKCXNub193b3JsZBgBIAIoDzoCLTEi" + 
          "ygEKEEdhbWVDcmVhdGVQYXJhbXMSEQoJZ2FtZV90eXBlGAEgAigREhkKDmNy" + 
          "ZWF0aW9uX2ZsYWdzGAIgAigNOgEwEjAKBGNvb3AYAyABKAsyIi5EMy5Pbmxp" + 
          "bmVTZXJ2aWNlLkNvb3BDcmVhdGVQYXJhbXMSLgoDcHZwGAQgASgLMiEuRDMu" + 
          "T25saW5lU2VydmljZS5QdlBDcmVhdGVQYXJhbXMSDAoEbmFtZRgFIAEoCRIY" + 
          "Cgppc19wcml2YXRlGAYgAigIOgR0cnVlImAKEEhlcm9DcmVhdGVQYXJhbXMS" + 
          "FgoKZ2JpZF9jbGFzcxgBIAIoDzoCLTESGgoLaXNfaGFyZGNvcmUYAiACKAg6" + 
          "BWZhbHNlEhgKCWlzX2ZlbWFsZRgDIAIoCDoFZmFsc2U=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_OnlineService_EntityId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_OnlineService_EntityId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.EntityId, global::D3.OnlineService.EntityId.Builder>(internal__static_D3_OnlineService_EntityId__Descriptor,
                new string[] { "İdHigh", "İdLow", });
        internal__static_D3_OnlineService_GameId__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_OnlineService_GameId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameId, global::D3.OnlineService.GameId.Builder>(internal__static_D3_OnlineService_GameId__Descriptor,
                new string[] { "Factory", "İdHigh", "İdLow", });
        internal__static_D3_OnlineService_ItemId__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_OnlineService_ItemId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ItemId, global::D3.OnlineService.ItemId.Builder>(internal__static_D3_OnlineService_ItemId__Descriptor,
                new string[] { "İdHigh", "İdLow", });
        internal__static_D3_OnlineService_CoopCreateParams__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_OnlineService_CoopCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.CoopCreateParams, global::D3.OnlineService.CoopCreateParams.Builder>(internal__static_D3_OnlineService_CoopCreateParams__Descriptor,
                new string[] { "DifficultyLevel", "Act", "SnoQuest", "QuestStepd", "ResumeFromSaveHerod", "OpenToFriends", "OpenToFriendsMessage", });
        internal__static_D3_OnlineService_PvPCreateParams__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.PvPCreateParams, global::D3.OnlineService.PvPCreateParams.Builder>(internal__static_D3_OnlineService_PvPCreateParams__Descriptor,
                new string[] { "SnoWorld", });
        internal__static_D3_OnlineService_GameCreateParams__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameCreateParams, global::D3.OnlineService.GameCreateParams.Builder>(internal__static_D3_OnlineService_GameCreateParams__Descriptor,
                new string[] { "GameType", "CreationFlags", "Coop", "Pvp", "Name", "İsPrivate", });
        internal__static_D3_OnlineService_HeroCreateParams__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroCreateParams, global::D3.OnlineService.HeroCreateParams.Builder>(internal__static_D3_OnlineService_HeroCreateParams__Descriptor,
                new string[] { "GbidClass", "İsHardcore", "İsFemale", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EntityId : pb::GeneratedMessage<EntityId, EntityId.Builder> {
    private EntityId() { }
    private static readonly EntityId defaultInstance = new EntityId().MakeReadOnly();
    private static readonly string[] _entityIdFieldNames = new string[] { "id_high", "id_low" };
    private static readonly uint[] _entityIdFieldTags = new uint[] { 8, 16 };
    public static EntityId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EntityId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EntityId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_EntityId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EntityId, EntityId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_EntityId__FieldAccessorTable; }
    }
    
    public const int İdHighFieldNumber = 1;
    private bool hasİdHigh;
    private ulong idHigh_;
    public bool HasİdHigh {
      get { return hasİdHigh; }
    }
    public ulong İdHigh {
      get { return idHigh_; }
    }
    
    public const int İdLowFieldNumber = 2;
    private bool hasİdLow;
    private ulong idLow_;
    public bool HasİdLow {
      get { return hasİdLow; }
    }
    public ulong İdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasİdHigh) return false;
        if (!hasİdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _entityIdFieldNames;
      if (hasİdHigh) {
        output.WriteUInt64(1, field_names[0], İdHigh);
      }
      if (hasİdLow) {
        output.WriteUInt64(2, field_names[1], İdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasİdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, İdHigh);
        }
        if (hasİdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, İdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EntityId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EntityId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EntityId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EntityId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EntityId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EntityId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EntityId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EntityId result;
      
      private EntityId PrepareBuilder() {
        if (resultIsReadOnly) {
          EntityId original = result;
          result = new EntityId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EntityId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.EntityId.Descriptor; }
      }
      
      public override EntityId DefaultInstanceForType {
        get { return global::D3.OnlineService.EntityId.DefaultInstance; }
      }
      
      public override EntityId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EntityId) {
          return MergeFrom((EntityId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EntityId other) {
        if (other == global::D3.OnlineService.EntityId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasİdHigh) {
          İdHigh = other.İdHigh;
        }
        if (other.HasİdLow) {
          İdLow = other.İdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_entityIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _entityIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasİdHigh = input.ReadUInt64(ref result.idHigh_);
              break;
            }
            case 16: {
              result.hasİdLow = input.ReadUInt64(ref result.idLow_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasİdHigh {
        get { return result.hasİdHigh; }
      }
      public ulong İdHigh {
        get { return result.İdHigh; }
        set { SetİdHigh(value); }
      }
      public Builder SetİdHigh(ulong value) {
        PrepareBuilder();
        result.hasİdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearİdHigh() {
        PrepareBuilder();
        result.hasİdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasİdLow {
        get { return result.hasİdLow; }
      }
      public ulong İdLow {
        get { return result.İdLow; }
        set { SetİdLow(value); }
      }
      public Builder SetİdLow(ulong value) {
        PrepareBuilder();
        result.hasİdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearİdLow() {
        PrepareBuilder();
        result.hasİdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static EntityId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameId : pb::GeneratedMessage<GameId, GameId.Builder> {
    private GameId() { }
    private static readonly GameId defaultInstance = new GameId().MakeReadOnly();
    private static readonly string[] _gameIdFieldNames = new string[] { "factory", "id_high", "id_low" };
    private static readonly uint[] _gameIdFieldTags = new uint[] { 8, 16, 24 };
    public static GameId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameId, GameId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameId__FieldAccessorTable; }
    }
    
    public const int FactoryFieldNumber = 1;
    private bool hasFactory;
    private ulong factory_;
    public bool HasFactory {
      get { return hasFactory; }
    }
    public ulong Factory {
      get { return factory_; }
    }
    
    public const int İdHighFieldNumber = 2;
    private bool hasİdHigh;
    private ulong idHigh_;
    public bool HasİdHigh {
      get { return hasİdHigh; }
    }
    public ulong İdHigh {
      get { return idHigh_; }
    }
    
    public const int İdLowFieldNumber = 3;
    private bool hasİdLow;
    private ulong idLow_;
    public bool HasİdLow {
      get { return hasİdLow; }
    }
    public ulong İdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFactory) return false;
        if (!hasİdHigh) return false;
        if (!hasİdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameIdFieldNames;
      if (hasFactory) {
        output.WriteUInt64(1, field_names[0], Factory);
      }
      if (hasİdHigh) {
        output.WriteUInt64(2, field_names[1], İdHigh);
      }
      if (hasİdLow) {
        output.WriteUInt64(3, field_names[2], İdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFactory) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Factory);
        }
        if (hasİdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, İdHigh);
        }
        if (hasİdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, İdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameId result;
      
      private GameId PrepareBuilder() {
        if (resultIsReadOnly) {
          GameId original = result;
          result = new GameId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.GameId.Descriptor; }
      }
      
      public override GameId DefaultInstanceForType {
        get { return global::D3.OnlineService.GameId.DefaultInstance; }
      }
      
      public override GameId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameId) {
          return MergeFrom((GameId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameId other) {
        if (other == global::D3.OnlineService.GameId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFactory) {
          Factory = other.Factory;
        }
        if (other.HasİdHigh) {
          İdHigh = other.İdHigh;
        }
        if (other.HasİdLow) {
          İdLow = other.İdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFactory = input.ReadUInt64(ref result.factory_);
              break;
            }
            case 16: {
              result.hasİdHigh = input.ReadUInt64(ref result.idHigh_);
              break;
            }
            case 24: {
              result.hasİdLow = input.ReadUInt64(ref result.idLow_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFactory {
        get { return result.hasFactory; }
      }
      public ulong Factory {
        get { return result.Factory; }
        set { SetFactory(value); }
      }
      public Builder SetFactory(ulong value) {
        PrepareBuilder();
        result.hasFactory = true;
        result.factory_ = value;
        return this;
      }
      public Builder ClearFactory() {
        PrepareBuilder();
        result.hasFactory = false;
        result.factory_ = 0UL;
        return this;
      }
      
      public bool HasİdHigh {
        get { return result.hasİdHigh; }
      }
      public ulong İdHigh {
        get { return result.İdHigh; }
        set { SetİdHigh(value); }
      }
      public Builder SetİdHigh(ulong value) {
        PrepareBuilder();
        result.hasİdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearİdHigh() {
        PrepareBuilder();
        result.hasİdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasİdLow {
        get { return result.hasİdLow; }
      }
      public ulong İdLow {
        get { return result.İdLow; }
        set { SetİdLow(value); }
      }
      public Builder SetİdLow(ulong value) {
        PrepareBuilder();
        result.hasİdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearİdLow() {
        PrepareBuilder();
        result.hasİdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static GameId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ItemId : pb::GeneratedMessage<ItemId, ItemId.Builder> {
    private ItemId() { }
    private static readonly ItemId defaultInstance = new ItemId().MakeReadOnly();
    private static readonly string[] _ıtemIdFieldNames = new string[] { "id_high", "id_low" };
    private static readonly uint[] _ıtemIdFieldTags = new uint[] { 8, 16 };
    public static ItemId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ItemId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ItemId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ItemId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ItemId, ItemId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ItemId__FieldAccessorTable; }
    }
    
    public const int İdHighFieldNumber = 1;
    private bool hasİdHigh;
    private ulong idHigh_;
    public bool HasİdHigh {
      get { return hasİdHigh; }
    }
    public ulong İdHigh {
      get { return idHigh_; }
    }
    
    public const int İdLowFieldNumber = 2;
    private bool hasİdLow;
    private ulong idLow_;
    public bool HasİdLow {
      get { return hasİdLow; }
    }
    public ulong İdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasİdHigh) return false;
        if (!hasİdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ıtemIdFieldNames;
      if (hasİdHigh) {
        output.WriteUInt64(1, field_names[0], İdHigh);
      }
      if (hasİdLow) {
        output.WriteUInt64(2, field_names[1], İdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasİdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, İdHigh);
        }
        if (hasİdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, İdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ItemId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ItemId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ItemId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ItemId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ItemId result;
      
      private ItemId PrepareBuilder() {
        if (resultIsReadOnly) {
          ItemId original = result;
          result = new ItemId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ItemId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ItemId.Descriptor; }
      }
      
      public override ItemId DefaultInstanceForType {
        get { return global::D3.OnlineService.ItemId.DefaultInstance; }
      }
      
      public override ItemId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemId) {
          return MergeFrom((ItemId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ItemId other) {
        if (other == global::D3.OnlineService.ItemId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasİdHigh) {
          İdHigh = other.İdHigh;
        }
        if (other.HasİdLow) {
          İdLow = other.İdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ıtemIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ıtemIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasİdHigh = input.ReadUInt64(ref result.idHigh_);
              break;
            }
            case 16: {
              result.hasİdLow = input.ReadUInt64(ref result.idLow_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasİdHigh {
        get { return result.hasİdHigh; }
      }
      public ulong İdHigh {
        get { return result.İdHigh; }
        set { SetİdHigh(value); }
      }
      public Builder SetİdHigh(ulong value) {
        PrepareBuilder();
        result.hasİdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearİdHigh() {
        PrepareBuilder();
        result.hasİdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasİdLow {
        get { return result.hasİdLow; }
      }
      public ulong İdLow {
        get { return result.İdLow; }
        set { SetİdLow(value); }
      }
      public Builder SetİdLow(ulong value) {
        PrepareBuilder();
        result.hasİdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearİdLow() {
        PrepareBuilder();
        result.hasİdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static ItemId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CoopCreateParams : pb::GeneratedMessage<CoopCreateParams, CoopCreateParams.Builder> {
    private CoopCreateParams() { }
    private static readonly CoopCreateParams defaultInstance = new CoopCreateParams().MakeReadOnly();
    private static readonly string[] _coopCreateParamsFieldNames = new string[] { "act", "difficulty_level", "open_to_friends", "open_to_friends_message", "quest_step_id", "resume_from_save_hero_id", "sno_quest" };
    private static readonly uint[] _coopCreateParamsFieldTags = new uint[] { 16, 8, 48, 58, 32, 42, 29 };
    public static CoopCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CoopCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CoopCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_CoopCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CoopCreateParams, CoopCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_CoopCreateParams__FieldAccessorTable; }
    }
    
    public const int DifficultyLevelFieldNumber = 1;
    private bool hasDifficultyLevel;
    private int difficultyLevel_ = -1;
    public bool HasDifficultyLevel {
      get { return hasDifficultyLevel; }
    }
    public int DifficultyLevel {
      get { return difficultyLevel_; }
    }
    
    public const int ActFieldNumber = 2;
    private bool hasAct;
    private int act_;
    public bool HasAct {
      get { return hasAct; }
    }
    public int Act {
      get { return act_; }
    }
    
    public const int SnoQuestFieldNumber = 3;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int QuestStepdFieldNumber = 4;
    private bool hasQuestStepd;
    private int questStepd_ = -1;
    public bool HasQuestStepd {
      get { return hasQuestStepd; }
    }
    public int QuestStepd {
      get { return questStepd_; }
    }
    
    public const int ResumeFromSaveHerodFieldNumber = 5;
    private bool hasResumeFromSaveHerod;
    private global::D3.OnlineService.EntityId resumeFromSaveHerod_;
    public bool HasResumeFromSaveHerod {
      get { return hasResumeFromSaveHerod; }
    }
    public global::D3.OnlineService.EntityId ResumeFromSaveHerod {
      get { return resumeFromSaveHerod_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int OpenToFriendsFieldNumber = 6;
    private bool hasOpenToFriends;
    private bool openToFriends_;
    public bool HasOpenToFriends {
      get { return hasOpenToFriends; }
    }
    public bool OpenToFriends {
      get { return openToFriends_; }
    }
    
    public const int OpenToFriendsMessageFieldNumber = 7;
    private bool hasOpenToFriendsMessage;
    private string openToFriendsMessage_ = "";
    public bool HasOpenToFriendsMessage {
      get { return hasOpenToFriendsMessage; }
    }
    public string OpenToFriendsMessage {
      get { return openToFriendsMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDifficultyLevel) return false;
        if (!hasAct) return false;
        if (!hasSnoQuest) return false;
        if (!hasQuestStepd) return false;
        if (!hasOpenToFriends) return false;
        if (HasResumeFromSaveHerod) {
          if (!ResumeFromSaveHerod.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _coopCreateParamsFieldNames;
      if (hasDifficultyLevel) {
        output.WriteInt32(1, field_names[1], DifficultyLevel);
      }
      if (hasAct) {
        output.WriteSInt32(2, field_names[0], Act);
      }
      if (hasSnoQuest) {
        output.WriteSFixed32(3, field_names[6], SnoQuest);
      }
      if (hasQuestStepd) {
        output.WriteInt32(4, field_names[4], QuestStepd);
      }
      if (hasResumeFromSaveHerod) {
        output.WriteMessage(5, field_names[5], ResumeFromSaveHerod);
      }
      if (hasOpenToFriends) {
        output.WriteBool(6, field_names[2], OpenToFriends);
      }
      if (hasOpenToFriendsMessage) {
        output.WriteString(7, field_names[3], OpenToFriendsMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDifficultyLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, DifficultyLevel);
        }
        if (hasAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Act);
        }
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(3, SnoQuest);
        }
        if (hasQuestStepd) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, QuestStepd);
        }
        if (hasResumeFromSaveHerod) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ResumeFromSaveHerod);
        }
        if (hasOpenToFriends) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, OpenToFriends);
        }
        if (hasOpenToFriendsMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OpenToFriendsMessage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CoopCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CoopCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CoopCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CoopCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CoopCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CoopCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CoopCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CoopCreateParams result;
      
      private CoopCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          CoopCreateParams original = result;
          result = new CoopCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CoopCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.CoopCreateParams.Descriptor; }
      }
      
      public override CoopCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.CoopCreateParams.DefaultInstance; }
      }
      
      public override CoopCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CoopCreateParams) {
          return MergeFrom((CoopCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CoopCreateParams other) {
        if (other == global::D3.OnlineService.CoopCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDifficultyLevel) {
          DifficultyLevel = other.DifficultyLevel;
        }
        if (other.HasAct) {
          Act = other.Act;
        }
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasQuestStepd) {
          QuestStepd = other.QuestStepd;
        }
        if (other.HasResumeFromSaveHerod) {
          MergeResumeFromSaveHerod(other.ResumeFromSaveHerod);
        }
        if (other.HasOpenToFriends) {
          OpenToFriends = other.OpenToFriends;
        }
        if (other.HasOpenToFriendsMessage) {
          OpenToFriendsMessage = other.OpenToFriendsMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_coopCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _coopCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDifficultyLevel = input.ReadInt32(ref result.difficultyLevel_);
              break;
            }
            case 16: {
              result.hasAct = input.ReadSInt32(ref result.act_);
              break;
            }
            case 29: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 32: {
              result.hasQuestStepd = input.ReadInt32(ref result.questStepd_);
              break;
            }
            case 42: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasResumeFromSaveHerod) {
                subBuilder.MergeFrom(ResumeFromSaveHerod);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ResumeFromSaveHerod = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasOpenToFriends = input.ReadBool(ref result.openToFriends_);
              break;
            }
            case 58: {
              result.hasOpenToFriendsMessage = input.ReadString(ref result.openToFriendsMessage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDifficultyLevel {
        get { return result.hasDifficultyLevel; }
      }
      public int DifficultyLevel {
        get { return result.DifficultyLevel; }
        set { SetDifficultyLevel(value); }
      }
      public Builder SetDifficultyLevel(int value) {
        PrepareBuilder();
        result.hasDifficultyLevel = true;
        result.difficultyLevel_ = value;
        return this;
      }
      public Builder ClearDifficultyLevel() {
        PrepareBuilder();
        result.hasDifficultyLevel = false;
        result.difficultyLevel_ = -1;
        return this;
      }
      
      public bool HasAct {
        get { return result.hasAct; }
      }
      public int Act {
        get { return result.Act; }
        set { SetAct(value); }
      }
      public Builder SetAct(int value) {
        PrepareBuilder();
        result.hasAct = true;
        result.act_ = value;
        return this;
      }
      public Builder ClearAct() {
        PrepareBuilder();
        result.hasAct = false;
        result.act_ = 0;
        return this;
      }
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasQuestStepd {
        get { return result.hasQuestStepd; }
      }
      public int QuestStepd {
        get { return result.QuestStepd; }
        set { SetQuestStepd(value); }
      }
      public Builder SetQuestStepd(int value) {
        PrepareBuilder();
        result.hasQuestStepd = true;
        result.questStepd_ = value;
        return this;
      }
      public Builder ClearQuestStepd() {
        PrepareBuilder();
        result.hasQuestStepd = false;
        result.questStepd_ = -1;
        return this;
      }
      
      public bool HasResumeFromSaveHerod {
       get { return result.hasResumeFromSaveHerod; }
      }
      public global::D3.OnlineService.EntityId ResumeFromSaveHerod {
        get { return result.ResumeFromSaveHerod; }
        set { SetResumeFromSaveHerod(value); }
      }
      public Builder SetResumeFromSaveHerod(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResumeFromSaveHerod = true;
        result.resumeFromSaveHerod_ = value;
        return this;
      }
      public Builder SetResumeFromSaveHerod(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResumeFromSaveHerod = true;
        result.resumeFromSaveHerod_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResumeFromSaveHerod(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResumeFromSaveHerod &&
            result.resumeFromSaveHerod_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.resumeFromSaveHerod_ = global::D3.OnlineService.EntityId.CreateBuilder(result.resumeFromSaveHerod_).MergeFrom(value).BuildPartial();
        } else {
          result.resumeFromSaveHerod_ = value;
        }
        result.hasResumeFromSaveHerod = true;
        return this;
      }
      public Builder ClearResumeFromSaveHerod() {
        PrepareBuilder();
        result.hasResumeFromSaveHerod = false;
        result.resumeFromSaveHerod_ = null;
        return this;
      }
      
      public bool HasOpenToFriends {
        get { return result.hasOpenToFriends; }
      }
      public bool OpenToFriends {
        get { return result.OpenToFriends; }
        set { SetOpenToFriends(value); }
      }
      public Builder SetOpenToFriends(bool value) {
        PrepareBuilder();
        result.hasOpenToFriends = true;
        result.openToFriends_ = value;
        return this;
      }
      public Builder ClearOpenToFriends() {
        PrepareBuilder();
        result.hasOpenToFriends = false;
        result.openToFriends_ = false;
        return this;
      }
      
      public bool HasOpenToFriendsMessage {
        get { return result.hasOpenToFriendsMessage; }
      }
      public string OpenToFriendsMessage {
        get { return result.OpenToFriendsMessage; }
        set { SetOpenToFriendsMessage(value); }
      }
      public Builder SetOpenToFriendsMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpenToFriendsMessage = true;
        result.openToFriendsMessage_ = value;
        return this;
      }
      public Builder ClearOpenToFriendsMessage() {
        PrepareBuilder();
        result.hasOpenToFriendsMessage = false;
        result.openToFriendsMessage_ = "";
        return this;
      }
    }
    static CoopCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PvPCreateParams : pb::GeneratedMessage<PvPCreateParams, PvPCreateParams.Builder> {
    private PvPCreateParams() { }
    private static readonly PvPCreateParams defaultInstance = new PvPCreateParams().MakeReadOnly();
    private static readonly string[] _pvPCreateParamsFieldNames = new string[] { "sno_world" };
    private static readonly uint[] _pvPCreateParamsFieldTags = new uint[] { 13 };
    public static PvPCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvPCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PvPCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_PvPCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvPCreateParams, PvPCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable; }
    }
    
    public const int SnoWorldFieldNumber = 1;
    private bool hasSnoWorld;
    private int snoWorld_ = -1;
    public bool HasSnoWorld {
      get { return hasSnoWorld; }
    }
    public int SnoWorld {
      get { return snoWorld_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoWorld) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pvPCreateParamsFieldNames;
      if (hasSnoWorld) {
        output.WriteSFixed32(1, field_names[0], SnoWorld);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoWorld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoWorld);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvPCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvPCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvPCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvPCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PvPCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvPCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PvPCreateParams result;
      
      private PvPCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          PvPCreateParams original = result;
          result = new PvPCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PvPCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.PvPCreateParams.Descriptor; }
      }
      
      public override PvPCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.PvPCreateParams.DefaultInstance; }
      }
      
      public override PvPCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvPCreateParams) {
          return MergeFrom((PvPCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvPCreateParams other) {
        if (other == global::D3.OnlineService.PvPCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoWorld) {
          SnoWorld = other.SnoWorld;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvPCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvPCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoWorld = input.ReadSFixed32(ref result.snoWorld_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoWorld {
        get { return result.hasSnoWorld; }
      }
      public int SnoWorld {
        get { return result.SnoWorld; }
        set { SetSnoWorld(value); }
      }
      public Builder SetSnoWorld(int value) {
        PrepareBuilder();
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder ClearSnoWorld() {
        PrepareBuilder();
        result.hasSnoWorld = false;
        result.snoWorld_ = -1;
        return this;
      }
    }
    static PvPCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameCreateParams : pb::GeneratedMessage<GameCreateParams, GameCreateParams.Builder> {
    private GameCreateParams() { }
    private static readonly GameCreateParams defaultInstance = new GameCreateParams().MakeReadOnly();
    private static readonly string[] _gameCreateParamsFieldNames = new string[] { "coop", "creation_flags", "game_type", "is_private", "name", "pvp" };
    private static readonly uint[] _gameCreateParamsFieldTags = new uint[] { 26, 16, 8, 48, 42, 34 };
    public static GameCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameCreateParams, GameCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable; }
    }
    
    public const int GameTypeFieldNumber = 1;
    private bool hasGameType;
    private int gameType_;
    public bool HasGameType {
      get { return hasGameType; }
    }
    public int GameType {
      get { return gameType_; }
    }
    
    public const int CreationFlagsFieldNumber = 2;
    private bool hasCreationFlags;
    private uint creationFlags_;
    public bool HasCreationFlags {
      get { return hasCreationFlags; }
    }
    public uint CreationFlags {
      get { return creationFlags_; }
    }
    
    public const int CoopFieldNumber = 3;
    private bool hasCoop;
    private global::D3.OnlineService.CoopCreateParams coop_;
    public bool HasCoop {
      get { return hasCoop; }
    }
    public global::D3.OnlineService.CoopCreateParams Coop {
      get { return coop_ ?? global::D3.OnlineService.CoopCreateParams.DefaultInstance; }
    }
    
    public const int PvpFieldNumber = 4;
    private bool hasPvp;
    private global::D3.OnlineService.PvPCreateParams pvp_;
    public bool HasPvp {
      get { return hasPvp; }
    }
    public global::D3.OnlineService.PvPCreateParams Pvp {
      get { return pvp_ ?? global::D3.OnlineService.PvPCreateParams.DefaultInstance; }
    }
    
    public const int NameFieldNumber = 5;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int İsPrivateFieldNumber = 6;
    private bool hasİsPrivate;
    private bool isPrivate_ = true;
    public bool HasİsPrivate {
      get { return hasİsPrivate; }
    }
    public bool İsPrivate {
      get { return isPrivate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameType) return false;
        if (!hasCreationFlags) return false;
        if (!hasİsPrivate) return false;
        if (HasCoop) {
          if (!Coop.IsInitialized) return false;
        }
        if (HasPvp) {
          if (!Pvp.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameCreateParamsFieldNames;
      if (hasGameType) {
        output.WriteSInt32(1, field_names[2], GameType);
      }
      if (hasCreationFlags) {
        output.WriteUInt32(2, field_names[1], CreationFlags);
      }
      if (hasCoop) {
        output.WriteMessage(3, field_names[0], Coop);
      }
      if (hasPvp) {
        output.WriteMessage(4, field_names[5], Pvp);
      }
      if (hasName) {
        output.WriteString(5, field_names[4], Name);
      }
      if (hasİsPrivate) {
        output.WriteBool(6, field_names[3], İsPrivate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, GameType);
        }
        if (hasCreationFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, CreationFlags);
        }
        if (hasCoop) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Coop);
        }
        if (hasPvp) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Pvp);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Name);
        }
        if (hasİsPrivate) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, İsPrivate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameCreateParams result;
      
      private GameCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          GameCreateParams original = result;
          result = new GameCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.GameCreateParams.Descriptor; }
      }
      
      public override GameCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.GameCreateParams.DefaultInstance; }
      }
      
      public override GameCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameCreateParams) {
          return MergeFrom((GameCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameCreateParams other) {
        if (other == global::D3.OnlineService.GameCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.HasCreationFlags) {
          CreationFlags = other.CreationFlags;
        }
        if (other.HasCoop) {
          MergeCoop(other.Coop);
        }
        if (other.HasPvp) {
          MergePvp(other.Pvp);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasİsPrivate) {
          İsPrivate = other.İsPrivate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameType = input.ReadSInt32(ref result.gameType_);
              break;
            }
            case 16: {
              result.hasCreationFlags = input.ReadUInt32(ref result.creationFlags_);
              break;
            }
            case 26: {
              global::D3.OnlineService.CoopCreateParams.Builder subBuilder = global::D3.OnlineService.CoopCreateParams.CreateBuilder();
              if (result.hasCoop) {
                subBuilder.MergeFrom(Coop);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Coop = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.OnlineService.PvPCreateParams.Builder subBuilder = global::D3.OnlineService.PvPCreateParams.CreateBuilder();
              if (result.hasPvp) {
                subBuilder.MergeFrom(Pvp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pvp = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 48: {
              result.hasİsPrivate = input.ReadBool(ref result.isPrivate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameType {
        get { return result.hasGameType; }
      }
      public int GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      public Builder SetGameType(int value) {
        PrepareBuilder();
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        PrepareBuilder();
        result.hasGameType = false;
        result.gameType_ = 0;
        return this;
      }
      
      public bool HasCreationFlags {
        get { return result.hasCreationFlags; }
      }
      public uint CreationFlags {
        get { return result.CreationFlags; }
        set { SetCreationFlags(value); }
      }
      public Builder SetCreationFlags(uint value) {
        PrepareBuilder();
        result.hasCreationFlags = true;
        result.creationFlags_ = value;
        return this;
      }
      public Builder ClearCreationFlags() {
        PrepareBuilder();
        result.hasCreationFlags = false;
        result.creationFlags_ = 0;
        return this;
      }
      
      public bool HasCoop {
       get { return result.hasCoop; }
      }
      public global::D3.OnlineService.CoopCreateParams Coop {
        get { return result.Coop; }
        set { SetCoop(value); }
      }
      public Builder SetCoop(global::D3.OnlineService.CoopCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCoop = true;
        result.coop_ = value;
        return this;
      }
      public Builder SetCoop(global::D3.OnlineService.CoopCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCoop = true;
        result.coop_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCoop(global::D3.OnlineService.CoopCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCoop &&
            result.coop_ != global::D3.OnlineService.CoopCreateParams.DefaultInstance) {
            result.coop_ = global::D3.OnlineService.CoopCreateParams.CreateBuilder(result.coop_).MergeFrom(value).BuildPartial();
        } else {
          result.coop_ = value;
        }
        result.hasCoop = true;
        return this;
      }
      public Builder ClearCoop() {
        PrepareBuilder();
        result.hasCoop = false;
        result.coop_ = null;
        return this;
      }
      
      public bool HasPvp {
       get { return result.hasPvp; }
      }
      public global::D3.OnlineService.PvPCreateParams Pvp {
        get { return result.Pvp; }
        set { SetPvp(value); }
      }
      public Builder SetPvp(global::D3.OnlineService.PvPCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPvp = true;
        result.pvp_ = value;
        return this;
      }
      public Builder SetPvp(global::D3.OnlineService.PvPCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPvp = true;
        result.pvp_ = builderForValue.Build();
        return this;
      }
      public Builder MergePvp(global::D3.OnlineService.PvPCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPvp &&
            result.pvp_ != global::D3.OnlineService.PvPCreateParams.DefaultInstance) {
            result.pvp_ = global::D3.OnlineService.PvPCreateParams.CreateBuilder(result.pvp_).MergeFrom(value).BuildPartial();
        } else {
          result.pvp_ = value;
        }
        result.hasPvp = true;
        return this;
      }
      public Builder ClearPvp() {
        PrepareBuilder();
        result.hasPvp = false;
        result.pvp_ = null;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasİsPrivate {
        get { return result.hasİsPrivate; }
      }
      public bool İsPrivate {
        get { return result.İsPrivate; }
        set { SetİsPrivate(value); }
      }
      public Builder SetİsPrivate(bool value) {
        PrepareBuilder();
        result.hasİsPrivate = true;
        result.isPrivate_ = value;
        return this;
      }
      public Builder ClearİsPrivate() {
        PrepareBuilder();
        result.hasİsPrivate = false;
        result.isPrivate_ = true;
        return this;
      }
    }
    static GameCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroCreateParams : pb::GeneratedMessage<HeroCreateParams, HeroCreateParams.Builder> {
    private HeroCreateParams() { }
    private static readonly HeroCreateParams defaultInstance = new HeroCreateParams().MakeReadOnly();
    private static readonly string[] _heroCreateParamsFieldNames = new string[] { "gbid_class", "is_female", "is_hardcore" };
    private static readonly uint[] _heroCreateParamsFieldTags = new uint[] { 13, 24, 16 };
    public static HeroCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroCreateParams, HeroCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable; }
    }
    
    public const int GbidClassFieldNumber = 1;
    private bool hasGbidClass;
    private int gbidClass_ = -1;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public int GbidClass {
      get { return gbidClass_; }
    }
    
    public const int İsHardcoreFieldNumber = 2;
    private bool hasİsHardcore;
    private bool isHardcore_;
    public bool HasİsHardcore {
      get { return hasİsHardcore; }
    }
    public bool İsHardcore {
      get { return isHardcore_; }
    }
    
    public const int İsFemaleFieldNumber = 3;
    private bool hasİsFemale;
    private bool isFemale_;
    public bool HasİsFemale {
      get { return hasİsFemale; }
    }
    public bool İsFemale {
      get { return isFemale_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGbidClass) return false;
        if (!hasİsHardcore) return false;
        if (!hasİsFemale) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroCreateParamsFieldNames;
      if (hasGbidClass) {
        output.WriteSFixed32(1, field_names[0], GbidClass);
      }
      if (hasİsHardcore) {
        output.WriteBool(2, field_names[2], İsHardcore);
      }
      if (hasİsFemale) {
        output.WriteBool(3, field_names[1], İsFemale);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, GbidClass);
        }
        if (hasİsHardcore) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, İsHardcore);
        }
        if (hasİsFemale) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, İsFemale);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroCreateParams result;
      
      private HeroCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroCreateParams original = result;
          result = new HeroCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.HeroCreateParams.Descriptor; }
      }
      
      public override HeroCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.HeroCreateParams.DefaultInstance; }
      }
      
      public override HeroCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroCreateParams) {
          return MergeFrom((HeroCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroCreateParams other) {
        if (other == global::D3.OnlineService.HeroCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasİsHardcore) {
          İsHardcore = other.İsHardcore;
        }
        if (other.HasİsFemale) {
          İsFemale = other.İsFemale;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasGbidClass = input.ReadSFixed32(ref result.gbidClass_);
              break;
            }
            case 16: {
              result.hasİsHardcore = input.ReadBool(ref result.isHardcore_);
              break;
            }
            case 24: {
              result.hasİsFemale = input.ReadBool(ref result.isFemale_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbidClass {
        get { return result.hasGbidClass; }
      }
      public int GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(int value) {
        PrepareBuilder();
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        PrepareBuilder();
        result.hasGbidClass = false;
        result.gbidClass_ = -1;
        return this;
      }
      
      public bool HasİsHardcore {
        get { return result.hasİsHardcore; }
      }
      public bool İsHardcore {
        get { return result.İsHardcore; }
        set { SetİsHardcore(value); }
      }
      public Builder SetİsHardcore(bool value) {
        PrepareBuilder();
        result.hasİsHardcore = true;
        result.isHardcore_ = value;
        return this;
      }
      public Builder ClearİsHardcore() {
        PrepareBuilder();
        result.hasİsHardcore = false;
        result.isHardcore_ = false;
        return this;
      }
      
      public bool HasİsFemale {
        get { return result.hasİsFemale; }
      }
      public bool İsFemale {
        get { return result.İsFemale; }
        set { SetİsFemale(value); }
      }
      public Builder SetİsFemale(bool value) {
        PrepareBuilder();
        result.hasİsFemale = true;
        result.isFemale_ = value;
        return this;
      }
      public Builder ClearİsFemale() {
        PrepareBuilder();
        result.hasİsFemale = false;
        result.isFemale_ = false;
        return this;
      }
    }
    static HeroCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
