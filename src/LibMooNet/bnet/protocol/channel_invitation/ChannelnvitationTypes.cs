// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.channel_invitation {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ChannelnvitationTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::bnet.protocol.channel_invitation.Invitation.Channelnvitation);
      registry.Add(global::bnet.protocol.channel_invitation.SendInvitationRequest.Channelnvitation);
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.Invitation, global::bnet.protocol.channel_invitation.Invitation.Builder> internal__static_bnet_protocol_channel_invitation_Invitation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.SendInvitationRequest, global::bnet.protocol.channel_invitation.SendInvitationRequest.Builder> internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_invitation_InvitationCollection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.InvitationCollection, global::bnet.protocol.channel_invitation.InvitationCollection.Builder> internal__static_bnet_protocol_channel_invitation_InvitationCollection__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ChannelnvitationTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CkRzZXJ2aWNlL2NoYW5uZWxfaW52aXRhdGlvbi9kZWZpbml0aW9uL2NoYW5u" + 
          "ZWxfaW52aXRhdGlvbl90eXBlcy5wcm90bxIgYm5ldC5wcm90b2NvbC5jaGFu" + 
          "bmVsX2ludml0YXRpb24aHWxpYi9wcm90b2NvbC9pbnZpdGF0aW9uLnByb3Rv" + 
          "GhlsaWIvcHJvdG9jb2wvZW50aXR5LnByb3RvGi5zZXJ2aWNlL2NoYW5uZWwv" + 
          "ZGVmaW5pdGlvbi9jaGFubmVsX3R5cGVzLnByb3RvIooCCgpJbnZpdGF0aW9u" + 
          "EkYKE2NoYW5uZWxfZGVzY3JpcHRpb24YASACKAsyKS5ibmV0LnByb3RvY29s" + 
          "LmNoYW5uZWwuQ2hhbm5lbERlc2NyaXB0aW9uEhcKCHJlc2VydmVkGAIgASgI" + 
          "OgVmYWxzZRIVCgZyZWpvaW4YAyABKAg6BWZhbHNlEhQKDHNlcnZpY2VfdHlw" + 
          "ZRgEIAIoDTJuChJjaGFubmVsX2ludml0YXRpb24SJC5ibmV0LnByb3RvY29s" + 
          "Lmludml0YXRpb24uSW52aXRhdGlvbhhpIAEoCzIsLmJuZXQucHJvdG9jb2wu" + 
          "Y2hhbm5lbF9pbnZpdGF0aW9uLkludml0YXRpb24igwIKFVNlbmRJbnZpdGF0" + 
          "aW9uUmVxdWVzdBIrCgpjaGFubmVsX2lkGAEgAigLMhcuYm5ldC5wcm90b2Nv" + 
          "bC5FbnRpdHlJZBIQCghyZXNlcnZlZBgCIAEoCBIOCgZyZWpvaW4YAyABKAgS" + 
          "FAoMc2VydmljZV90eXBlGAQgAigNMoQBChJjaGFubmVsX2ludml0YXRpb24S" + 
          "Ly5ibmV0LnByb3RvY29sLmludml0YXRpb24uU2VuZEludml0YXRpb25SZXF1" + 
          "ZXN0GGkgASgLMjcuYm5ldC5wcm90b2NvbC5jaGFubmVsX2ludml0YXRpb24u" + 
          "U2VuZEludml0YXRpb25SZXF1ZXN0IqQBChRJbnZpdGF0aW9uQ29sbGVjdGlv" + 
          "bhIUCgxzZXJ2aWNlX3R5cGUYASABKA0SIAoYbWF4X3JlY2VpdmVkX2ludml0" + 
          "YXRpb25zGAIgASgNEhEKCW9iamVjdF9pZBgDIAEoBBJBChNyZWNlaXZlZF9p" + 
          "bnZpdGF0aW9uGAQgAygLMiQuYm5ldC5wcm90b2NvbC5pbnZpdGF0aW9uLklu" + 
          "dml0YXRpb24=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_channel_invitation_Invitation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.Invitation, global::bnet.protocol.channel_invitation.Invitation.Builder>(internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor,
                new string[] { "ChannelDescription", "Reserved", "Rejoin", "ServiceType", });
        global::bnet.protocol.channel_invitation.Invitation.Channelnvitation = pb::GeneratedSingleExtension<global::bnet.protocol.channel_invitation.Invitation>.CreateInstance(global::bnet.protocol.channel_invitation.Invitation.Descriptor.Extensions[0]);
        internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.SendInvitationRequest, global::bnet.protocol.channel_invitation.SendInvitationRequest.Builder>(internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor,
                new string[] { "Channeld", "Reserved", "Rejoin", "ServiceType", });
        global::bnet.protocol.channel_invitation.SendInvitationRequest.Channelnvitation = pb::GeneratedSingleExtension<global::bnet.protocol.channel_invitation.SendInvitationRequest>.CreateInstance(global::bnet.protocol.channel_invitation.SendInvitationRequest.Descriptor.Extensions[0]);
        internal__static_bnet_protocol_channel_invitation_InvitationCollection__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_channel_invitation_InvitationCollection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.InvitationCollection, global::bnet.protocol.channel_invitation.InvitationCollection.Builder>(internal__static_bnet_protocol_channel_invitation_InvitationCollection__Descriptor,
                new string[] { "ServiceType", "MaxReceivednvitations", "Objectd", "Receivednvitation", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.invitation.İnvitation.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.channel.ChannelTypes.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Invitation : pb::GeneratedMessage<Invitation, Invitation.Builder> {
    private Invitation() { }
    private static readonly Invitation defaultInstance = new Invitation().MakeReadOnly();
    private static readonly string[] _ınvitationFieldNames = new string[] { "channel_description", "rejoin", "reserved", "service_type" };
    private static readonly uint[] _ınvitationFieldTags = new uint[] { 10, 24, 16, 32 };
    public static Invitation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Invitation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Invitation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel_invitation.ChannelnvitationTypes.internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Invitation, Invitation.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel_invitation.ChannelnvitationTypes.internal__static_bnet_protocol_channel_invitation_Invitation__FieldAccessorTable; }
    }
    
    public const int ChannelnvitationFieldNumber = 105;
    public static pb::GeneratedExtensionBase<global::bnet.protocol.channel_invitation.Invitation> Channelnvitation;
    public const int ChannelDescriptionFieldNumber = 1;
    private bool hasChannelDescription;
    private global::bnet.protocol.channel.ChannelDescription channelDescription_;
    public bool HasChannelDescription {
      get { return hasChannelDescription; }
    }
    public global::bnet.protocol.channel.ChannelDescription ChannelDescription {
      get { return channelDescription_ ?? global::bnet.protocol.channel.ChannelDescription.DefaultInstance; }
    }
    
    public const int ReservedFieldNumber = 2;
    private bool hasReserved;
    private bool reserved_;
    public bool HasReserved {
      get { return hasReserved; }
    }
    public bool Reserved {
      get { return reserved_; }
    }
    
    public const int RejoinFieldNumber = 3;
    private bool hasRejoin;
    private bool rejoin_;
    public bool HasRejoin {
      get { return hasRejoin; }
    }
    public bool Rejoin {
      get { return rejoin_; }
    }
    
    public const int ServiceTypeFieldNumber = 4;
    private bool hasServiceType;
    private uint serviceType_;
    public bool HasServiceType {
      get { return hasServiceType; }
    }
    public uint ServiceType {
      get { return serviceType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelDescription) return false;
        if (!hasServiceType) return false;
        if (!ChannelDescription.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ınvitationFieldNames;
      if (hasChannelDescription) {
        output.WriteMessage(1, field_names[0], ChannelDescription);
      }
      if (hasReserved) {
        output.WriteBool(2, field_names[2], Reserved);
      }
      if (hasRejoin) {
        output.WriteBool(3, field_names[1], Rejoin);
      }
      if (hasServiceType) {
        output.WriteUInt32(4, field_names[3], ServiceType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChannelDescription) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelDescription);
        }
        if (hasReserved) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Reserved);
        }
        if (hasRejoin) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Rejoin);
        }
        if (hasServiceType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, ServiceType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Invitation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Invitation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Invitation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Invitation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Invitation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Invitation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Invitation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Invitation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Invitation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Invitation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Invitation MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Invitation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Invitation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Invitation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Invitation result;
      
      private Invitation PrepareBuilder() {
        if (resultIsReadOnly) {
          Invitation original = result;
          result = new Invitation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Invitation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel_invitation.Invitation.Descriptor; }
      }
      
      public override Invitation DefaultInstanceForType {
        get { return global::bnet.protocol.channel_invitation.Invitation.DefaultInstance; }
      }
      
      public override Invitation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Invitation) {
          return MergeFrom((Invitation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Invitation other) {
        if (other == global::bnet.protocol.channel_invitation.Invitation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelDescription) {
          MergeChannelDescription(other.ChannelDescription);
        }
        if (other.HasReserved) {
          Reserved = other.Reserved;
        }
        if (other.HasRejoin) {
          Rejoin = other.Rejoin;
        }
        if (other.HasServiceType) {
          ServiceType = other.ServiceType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ınvitationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ınvitationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.channel.ChannelDescription.Builder subBuilder = global::bnet.protocol.channel.ChannelDescription.CreateBuilder();
              if (result.hasChannelDescription) {
                subBuilder.MergeFrom(ChannelDescription);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelDescription = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasReserved = input.ReadBool(ref result.reserved_);
              break;
            }
            case 24: {
              result.hasRejoin = input.ReadBool(ref result.rejoin_);
              break;
            }
            case 32: {
              result.hasServiceType = input.ReadUInt32(ref result.serviceType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelDescription {
       get { return result.hasChannelDescription; }
      }
      public global::bnet.protocol.channel.ChannelDescription ChannelDescription {
        get { return result.ChannelDescription; }
        set { SetChannelDescription(value); }
      }
      public Builder SetChannelDescription(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelDescription = true;
        result.channelDescription_ = value;
        return this;
      }
      public Builder SetChannelDescription(global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelDescription = true;
        result.channelDescription_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelDescription(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelDescription &&
            result.channelDescription_ != global::bnet.protocol.channel.ChannelDescription.DefaultInstance) {
            result.channelDescription_ = global::bnet.protocol.channel.ChannelDescription.CreateBuilder(result.channelDescription_).MergeFrom(value).BuildPartial();
        } else {
          result.channelDescription_ = value;
        }
        result.hasChannelDescription = true;
        return this;
      }
      public Builder ClearChannelDescription() {
        PrepareBuilder();
        result.hasChannelDescription = false;
        result.channelDescription_ = null;
        return this;
      }
      
      public bool HasReserved {
        get { return result.hasReserved; }
      }
      public bool Reserved {
        get { return result.Reserved; }
        set { SetReserved(value); }
      }
      public Builder SetReserved(bool value) {
        PrepareBuilder();
        result.hasReserved = true;
        result.reserved_ = value;
        return this;
      }
      public Builder ClearReserved() {
        PrepareBuilder();
        result.hasReserved = false;
        result.reserved_ = false;
        return this;
      }
      
      public bool HasRejoin {
        get { return result.hasRejoin; }
      }
      public bool Rejoin {
        get { return result.Rejoin; }
        set { SetRejoin(value); }
      }
      public Builder SetRejoin(bool value) {
        PrepareBuilder();
        result.hasRejoin = true;
        result.rejoin_ = value;
        return this;
      }
      public Builder ClearRejoin() {
        PrepareBuilder();
        result.hasRejoin = false;
        result.rejoin_ = false;
        return this;
      }
      
      public bool HasServiceType {
        get { return result.hasServiceType; }
      }
      public uint ServiceType {
        get { return result.ServiceType; }
        set { SetServiceType(value); }
      }
      public Builder SetServiceType(uint value) {
        PrepareBuilder();
        result.hasServiceType = true;
        result.serviceType_ = value;
        return this;
      }
      public Builder ClearServiceType() {
        PrepareBuilder();
        result.hasServiceType = false;
        result.serviceType_ = 0;
        return this;
      }
    }
    static Invitation() {
      object.ReferenceEquals(global::bnet.protocol.channel_invitation.ChannelnvitationTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SendInvitationRequest : pb::GeneratedMessage<SendInvitationRequest, SendInvitationRequest.Builder> {
    private SendInvitationRequest() { }
    private static readonly SendInvitationRequest defaultInstance = new SendInvitationRequest().MakeReadOnly();
    private static readonly string[] _sendInvitationRequestFieldNames = new string[] { "channel_id", "rejoin", "reserved", "service_type" };
    private static readonly uint[] _sendInvitationRequestFieldTags = new uint[] { 10, 24, 16, 32 };
    public static SendInvitationRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendInvitationRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendInvitationRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel_invitation.ChannelnvitationTypes.internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendInvitationRequest, SendInvitationRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel_invitation.ChannelnvitationTypes.internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__FieldAccessorTable; }
    }
    
    public const int ChannelnvitationFieldNumber = 105;
    public static pb::GeneratedExtensionBase<global::bnet.protocol.channel_invitation.SendInvitationRequest> Channelnvitation;
    public const int ChanneldFieldNumber = 1;
    private bool hasChanneld;
    private global::bnet.protocol.EntityId channeld_;
    public bool HasChanneld {
      get { return hasChanneld; }
    }
    public global::bnet.protocol.EntityId Channeld {
      get { return channeld_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ReservedFieldNumber = 2;
    private bool hasReserved;
    private bool reserved_;
    public bool HasReserved {
      get { return hasReserved; }
    }
    public bool Reserved {
      get { return reserved_; }
    }
    
    public const int RejoinFieldNumber = 3;
    private bool hasRejoin;
    private bool rejoin_;
    public bool HasRejoin {
      get { return hasRejoin; }
    }
    public bool Rejoin {
      get { return rejoin_; }
    }
    
    public const int ServiceTypeFieldNumber = 4;
    private bool hasServiceType;
    private uint serviceType_;
    public bool HasServiceType {
      get { return hasServiceType; }
    }
    public uint ServiceType {
      get { return serviceType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChanneld) return false;
        if (!hasServiceType) return false;
        if (!Channeld.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendInvitationRequestFieldNames;
      if (hasChanneld) {
        output.WriteMessage(1, field_names[0], Channeld);
      }
      if (hasReserved) {
        output.WriteBool(2, field_names[2], Reserved);
      }
      if (hasRejoin) {
        output.WriteBool(3, field_names[1], Rejoin);
      }
      if (hasServiceType) {
        output.WriteUInt32(4, field_names[3], ServiceType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChanneld) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Channeld);
        }
        if (hasReserved) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Reserved);
        }
        if (hasRejoin) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Rejoin);
        }
        if (hasServiceType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, ServiceType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendInvitationRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendInvitationRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendInvitationRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendInvitationRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendInvitationRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendInvitationRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendInvitationRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendInvitationRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendInvitationRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendInvitationRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendInvitationRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendInvitationRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SendInvitationRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendInvitationRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendInvitationRequest result;
      
      private SendInvitationRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SendInvitationRequest original = result;
          result = new SendInvitationRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendInvitationRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel_invitation.SendInvitationRequest.Descriptor; }
      }
      
      public override SendInvitationRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel_invitation.SendInvitationRequest.DefaultInstance; }
      }
      
      public override SendInvitationRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendInvitationRequest) {
          return MergeFrom((SendInvitationRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendInvitationRequest other) {
        if (other == global::bnet.protocol.channel_invitation.SendInvitationRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChanneld) {
          MergeChanneld(other.Channeld);
        }
        if (other.HasReserved) {
          Reserved = other.Reserved;
        }
        if (other.HasRejoin) {
          Rejoin = other.Rejoin;
        }
        if (other.HasServiceType) {
          ServiceType = other.ServiceType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendInvitationRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendInvitationRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasChanneld) {
                subBuilder.MergeFrom(Channeld);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Channeld = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasReserved = input.ReadBool(ref result.reserved_);
              break;
            }
            case 24: {
              result.hasRejoin = input.ReadBool(ref result.rejoin_);
              break;
            }
            case 32: {
              result.hasServiceType = input.ReadUInt32(ref result.serviceType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChanneld {
       get { return result.hasChanneld; }
      }
      public global::bnet.protocol.EntityId Channeld {
        get { return result.Channeld; }
        set { SetChanneld(value); }
      }
      public Builder SetChanneld(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChanneld = true;
        result.channeld_ = value;
        return this;
      }
      public Builder SetChanneld(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChanneld = true;
        result.channeld_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChanneld(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChanneld &&
            result.channeld_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channeld_ = global::bnet.protocol.EntityId.CreateBuilder(result.channeld_).MergeFrom(value).BuildPartial();
        } else {
          result.channeld_ = value;
        }
        result.hasChanneld = true;
        return this;
      }
      public Builder ClearChanneld() {
        PrepareBuilder();
        result.hasChanneld = false;
        result.channeld_ = null;
        return this;
      }
      
      public bool HasReserved {
        get { return result.hasReserved; }
      }
      public bool Reserved {
        get { return result.Reserved; }
        set { SetReserved(value); }
      }
      public Builder SetReserved(bool value) {
        PrepareBuilder();
        result.hasReserved = true;
        result.reserved_ = value;
        return this;
      }
      public Builder ClearReserved() {
        PrepareBuilder();
        result.hasReserved = false;
        result.reserved_ = false;
        return this;
      }
      
      public bool HasRejoin {
        get { return result.hasRejoin; }
      }
      public bool Rejoin {
        get { return result.Rejoin; }
        set { SetRejoin(value); }
      }
      public Builder SetRejoin(bool value) {
        PrepareBuilder();
        result.hasRejoin = true;
        result.rejoin_ = value;
        return this;
      }
      public Builder ClearRejoin() {
        PrepareBuilder();
        result.hasRejoin = false;
        result.rejoin_ = false;
        return this;
      }
      
      public bool HasServiceType {
        get { return result.hasServiceType; }
      }
      public uint ServiceType {
        get { return result.ServiceType; }
        set { SetServiceType(value); }
      }
      public Builder SetServiceType(uint value) {
        PrepareBuilder();
        result.hasServiceType = true;
        result.serviceType_ = value;
        return this;
      }
      public Builder ClearServiceType() {
        PrepareBuilder();
        result.hasServiceType = false;
        result.serviceType_ = 0;
        return this;
      }
    }
    static SendInvitationRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel_invitation.ChannelnvitationTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InvitationCollection : pb::GeneratedMessage<InvitationCollection, InvitationCollection.Builder> {
    private InvitationCollection() { }
    private static readonly InvitationCollection defaultInstance = new InvitationCollection().MakeReadOnly();
    private static readonly string[] _ınvitationCollectionFieldNames = new string[] { "max_received_invitations", "object_id", "received_invitation", "service_type" };
    private static readonly uint[] _ınvitationCollectionFieldTags = new uint[] { 16, 24, 34, 8 };
    public static InvitationCollection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvitationCollection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InvitationCollection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel_invitation.ChannelnvitationTypes.internal__static_bnet_protocol_channel_invitation_InvitationCollection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvitationCollection, InvitationCollection.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel_invitation.ChannelnvitationTypes.internal__static_bnet_protocol_channel_invitation_InvitationCollection__FieldAccessorTable; }
    }
    
    public const int ServiceTypeFieldNumber = 1;
    private bool hasServiceType;
    private uint serviceType_;
    public bool HasServiceType {
      get { return hasServiceType; }
    }
    public uint ServiceType {
      get { return serviceType_; }
    }
    
    public const int MaxReceivednvitationsFieldNumber = 2;
    private bool hasMaxReceivednvitations;
    private uint maxReceivednvitations_;
    public bool HasMaxReceivednvitations {
      get { return hasMaxReceivednvitations; }
    }
    public uint MaxReceivednvitations {
      get { return maxReceivednvitations_; }
    }
    
    public const int ObjectdFieldNumber = 3;
    private bool hasObjectd;
    private ulong objectd_;
    public bool HasObjectd {
      get { return hasObjectd; }
    }
    public ulong Objectd {
      get { return objectd_; }
    }
    
    public const int ReceivednvitationFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.invitation.Invitation> receivednvitation_ = new pbc::PopsicleList<global::bnet.protocol.invitation.Invitation>();
    public scg::IList<global::bnet.protocol.invitation.Invitation> ReceivednvitationList {
      get { return receivednvitation_; }
    }
    public int ReceivednvitationCount {
      get { return receivednvitation_.Count; }
    }
    public global::bnet.protocol.invitation.Invitation GetReceivednvitation(int index) {
      return receivednvitation_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.invitation.Invitation element in ReceivednvitationList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ınvitationCollectionFieldNames;
      if (hasServiceType) {
        output.WriteUInt32(1, field_names[3], ServiceType);
      }
      if (hasMaxReceivednvitations) {
        output.WriteUInt32(2, field_names[0], MaxReceivednvitations);
      }
      if (hasObjectd) {
        output.WriteUInt64(3, field_names[1], Objectd);
      }
      if (receivednvitation_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], receivednvitation_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServiceType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ServiceType);
        }
        if (hasMaxReceivednvitations) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MaxReceivednvitations);
        }
        if (hasObjectd) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Objectd);
        }
        foreach (global::bnet.protocol.invitation.Invitation element in ReceivednvitationList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvitationCollection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvitationCollection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvitationCollection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvitationCollection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvitationCollection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvitationCollection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvitationCollection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvitationCollection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvitationCollection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvitationCollection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InvitationCollection MakeReadOnly() {
      receivednvitation_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvitationCollection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InvitationCollection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InvitationCollection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InvitationCollection result;
      
      private InvitationCollection PrepareBuilder() {
        if (resultIsReadOnly) {
          InvitationCollection original = result;
          result = new InvitationCollection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InvitationCollection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel_invitation.InvitationCollection.Descriptor; }
      }
      
      public override InvitationCollection DefaultInstanceForType {
        get { return global::bnet.protocol.channel_invitation.InvitationCollection.DefaultInstance; }
      }
      
      public override InvitationCollection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvitationCollection) {
          return MergeFrom((InvitationCollection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvitationCollection other) {
        if (other == global::bnet.protocol.channel_invitation.InvitationCollection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServiceType) {
          ServiceType = other.ServiceType;
        }
        if (other.HasMaxReceivednvitations) {
          MaxReceivednvitations = other.MaxReceivednvitations;
        }
        if (other.HasObjectd) {
          Objectd = other.Objectd;
        }
        if (other.receivednvitation_.Count != 0) {
          result.receivednvitation_.Add(other.receivednvitation_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ınvitationCollectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ınvitationCollectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServiceType = input.ReadUInt32(ref result.serviceType_);
              break;
            }
            case 16: {
              result.hasMaxReceivednvitations = input.ReadUInt32(ref result.maxReceivednvitations_);
              break;
            }
            case 24: {
              result.hasObjectd = input.ReadUInt64(ref result.objectd_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.receivednvitation_, global::bnet.protocol.invitation.Invitation.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServiceType {
        get { return result.hasServiceType; }
      }
      public uint ServiceType {
        get { return result.ServiceType; }
        set { SetServiceType(value); }
      }
      public Builder SetServiceType(uint value) {
        PrepareBuilder();
        result.hasServiceType = true;
        result.serviceType_ = value;
        return this;
      }
      public Builder ClearServiceType() {
        PrepareBuilder();
        result.hasServiceType = false;
        result.serviceType_ = 0;
        return this;
      }
      
      public bool HasMaxReceivednvitations {
        get { return result.hasMaxReceivednvitations; }
      }
      public uint MaxReceivednvitations {
        get { return result.MaxReceivednvitations; }
        set { SetMaxReceivednvitations(value); }
      }
      public Builder SetMaxReceivednvitations(uint value) {
        PrepareBuilder();
        result.hasMaxReceivednvitations = true;
        result.maxReceivednvitations_ = value;
        return this;
      }
      public Builder ClearMaxReceivednvitations() {
        PrepareBuilder();
        result.hasMaxReceivednvitations = false;
        result.maxReceivednvitations_ = 0;
        return this;
      }
      
      public bool HasObjectd {
        get { return result.hasObjectd; }
      }
      public ulong Objectd {
        get { return result.Objectd; }
        set { SetObjectd(value); }
      }
      public Builder SetObjectd(ulong value) {
        PrepareBuilder();
        result.hasObjectd = true;
        result.objectd_ = value;
        return this;
      }
      public Builder ClearObjectd() {
        PrepareBuilder();
        result.hasObjectd = false;
        result.objectd_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.invitation.Invitation> ReceivednvitationList {
        get { return PrepareBuilder().receivednvitation_; }
      }
      public int ReceivednvitationCount {
        get { return result.ReceivednvitationCount; }
      }
      public global::bnet.protocol.invitation.Invitation GetReceivednvitation(int index) {
        return result.GetReceivednvitation(index);
      }
      public Builder SetReceivednvitation(int index, global::bnet.protocol.invitation.Invitation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.receivednvitation_[index] = value;
        return this;
      }
      public Builder SetReceivednvitation(int index, global::bnet.protocol.invitation.Invitation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.receivednvitation_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReceivednvitation(global::bnet.protocol.invitation.Invitation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.receivednvitation_.Add(value);
        return this;
      }
      public Builder AddReceivednvitation(global::bnet.protocol.invitation.Invitation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.receivednvitation_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReceivednvitation(scg::IEnumerable<global::bnet.protocol.invitation.Invitation> values) {
        PrepareBuilder();
        result.receivednvitation_.Add(values);
        return this;
      }
      public Builder ClearReceivednvitation() {
        PrepareBuilder();
        result.receivednvitation_.Clear();
        return this;
      }
    }
    static InvitationCollection() {
      object.ReferenceEquals(global::bnet.protocol.channel_invitation.ChannelnvitationTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
