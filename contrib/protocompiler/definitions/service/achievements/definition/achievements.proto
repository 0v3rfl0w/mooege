package bnet.protocol.achievements;
import "lib/rpc/rpc.proto";
import "lib/protocol/entity.proto";
import "lib/protocol/content_handle.proto";

message AchievementUpdateRecord {
	required uint64 achievement_id = 1;
	required int32 completion = 2;
}
message CriteriaUpdateRecord {
	required uint64 criteria_Id = 1;
	optional uint64 start_time = 2 [default = 0];
	optional uint64 quantity = 3 [default = 0];
	optional uint32 flags = 4 [default = 0];
}
message PostUpdateRecord {
	required .bnet.protocol.EntityId target_id = 1;
	repeated .bnet.protocol.achievements.CriteriaUpdateRecord criteria = 2;
}
message PostUpdateRequest {
	repeated .bnet.protocol.achievements.PostUpdateRecord post_update_record = 1;
	optional fixed32 program_id = 2 [default = 0];
}
message PostUpdateResponse {
	repeated uint32 error_code = 1;
}
message RegisterWithServiceRequest {
	required .bnet.protocol.EntityId target_id = 1;
	required uint64 object_id = 2;
	optional uint32 registration_flags = 3;
	optional fixed32 program_id = 4 [default = 0];
}
message RegisterWithServiceResponse {
	optional uint32 max_records_per_update = 1 [default = 0];
	optional uint32 max_criteria_per_record = 2 [default = 0];
	optional uint32 max_achievements_per_record = 3 [default = 0];
	optional uint32 max_registrations = 4 [default = 0];
	optional uint64 flush_frequency = 5 [default = 0];
	optional .bnet.protocol.achievements.Snapshot snapshot = 6;
}
message UnregisterFromServiceRequest {
	required .bnet.protocol.EntityId target_id = 1;
	required uint64 object_id = 2;
}
message Snapshot {
	repeated .bnet.protocol.achievements.AchievementUpdateRecord achievement_snapshot = 1;
	repeated .bnet.protocol.achievements.CriteriaUpdateRecord criteria_snapshot = 2;
}
message RequestSnapshotRequest {
	required .bnet.protocol.EntityId entity_id = 1;
	required uint32 filter = 2;
}
message RequestSnapshotResponse {
	optional .bnet.protocol.achievements.Snapshot snapshot = 1;
}
message InitializeRequest {
	optional fixed32 program_id = 1;
}
message InitializeResponse {
	required .bnet.protocol.ContentHandle content_handle = 1;
}
message SnapshotUpdateNotification {
	required .bnet.protocol.EntityId target_id = 1;
	required .bnet.protocol.achievements.Snapshot snapshot = 2;
}
service AchievementsService {
	rpc PostUpdate (.bnet.protocol.achievements.PostUpdateRequest) returns (.bnet.protocol.achievements.PostUpdateResponse);
	rpc RegisterWithService (.bnet.protocol.achievements.RegisterWithServiceRequest) returns (.bnet.protocol.achievements.RegisterWithServiceResponse);
	rpc RequestSnapshot (.bnet.protocol.achievements.RequestSnapshotRequest) returns (.bnet.protocol.achievements.RequestSnapshotResponse);
	rpc UnregisterFromService (.bnet.protocol.achievements.UnregisterFromServiceRequest) returns (.bnet.protocol.NoData);
	rpc Initialize (.bnet.protocol.achievements.InitializeRequest) returns (.bnet.protocol.achievements.InitializeResponse);
}
service AchievementsNotify {
	rpc NotifySnapshotUpdate (.bnet.protocol.achievements.SnapshotUpdateNotification) returns (.bnet.protocol.NO_RESPONSE);
}
