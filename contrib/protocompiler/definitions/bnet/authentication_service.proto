import "bnet/account_types.proto";
import "bnet/rpc.proto";
import "bnet/content_handle.proto";
import "bnet/entity.proto";

package bnet.protocol.authentication;

option cc_generic_services = false;

message ModuleLoadRequest
{
    required .bnet.protocol.ContentHandle module_handle = 1;
    optional bytes message = 2;
}

message ModuleLoadResponse
{
    optional int32 module_id = 2;
}

message ModuleMessageRequest
{
    required int32 module_id = 1;
    optional bytes message = 2;
}

message LogonRequest
{
    optional string program = 1;
    optional string platform = 2;
    optional string locale = 3;
    optional string email = 4;
    optional string version = 5;
    optional int32 application_version = 6;
}

message LogonResponse
{
    required .bnet.protocol.EntityId account = 1;
    repeated .bnet.protocol.EntityId game_account = 2;
}

message AccountSettingsNotification
{
    repeated .bnet.protocol.account.AccountLicense account_licenses = 1;
    repeated .bnet.protocol.account.AccountLicense game_account_licenses = 2;
    optional bool is_using_rid = 3;
    optional bool is_playing_from_igr = 4;
    optional bool can_receive_voice = 5;
    optional bool can_send_voice = 6;
}

service AuthenticationClient
{
    rpc ModuleLoad(.bnet.protocol.authentication.ModuleLoadRequest) returns(.bnet.protocol.authentication.ModuleLoadResponse)
    {
        option (method_id) = 1;
    }
    rpc ModuleMessage(.bnet.protocol.authentication.ModuleMessageRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 2;
    }
    rpc AccountSettings(.bnet.protocol.authentication.AccountSettingsNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 3;
    }
}

service AuthenticationServer
{
    rpc Logon(.bnet.protocol.authentication.LogonRequest) returns(.bnet.protocol.authentication.LogonResponse)
    {
        option (method_id) = 1;
    }
    rpc ModuleMessage(.bnet.protocol.authentication.ModuleMessageRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 2;
    }
    rpc SelectGameAccount(.bnet.protocol.EntityId) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 3;
    }
}

